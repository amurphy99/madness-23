notes_23-01-06



forward propagation

use that formula TanH? i think


* tell dave to get github desktop
* tell dave to get vscode


project structure:
-------------------

* folder > network classes code
* folder > data
* folder > data manipulation code
* folder > save states
* file   > run it

.git_ignore




team1 id
team2 id
team1 win (1 or 0)

team1 season averages for
team1 season averages against



  0: Season      1: DayNum      2: WTeamID     3: WScore      4: LTeamID     5: LScore      6: WLoc      
  7: NumOT       8: WFGM        9: WFGA       10: WFGM3      11: WFGA3      12: WFTM       13: WFTA      
 14: WOR        15: WDR        16: WAst       17: WTO        18: WStl       19: WBlk       20: WPF       
 21: LFGM       22: LFGA       23: LFGM3      24: LFGA3      25: LFTM       26: LFTA       27: LOR       
 28: LDR        29: LAst       30: LTO        31: LStl       32: LBlk       33: LPF 



W
---
2, 
3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
(14)

L
---
4, 
5, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33
(14)



dictionary:
-----------
key
	* teamID

value 
	* list with an int and two other lists
		- the int is number of games
		- list of their averages
		- list with opponent averages
	* use number of games to save running average



team1 id
team2 id
team1 win (1 or 0)





















timer:  48.38360118865967
count:  40
accuracy: 59.66%
[1560, 1559, 1559, 1555, 1554, 1548, 1541, 1536, 1501, 1454]


total layers: 3 

layer: 0 |  14 neurons
layer: 1 |  14 neurons
layer: 2 |  1 neurons




timer:  58.36808514595032
count:  30
accuracy: 59.54%
[1557, 1546, 1538, 1535, 1535, 1533, 1530, 1523, 1502, 1495]

total layers: 4 

layer: 0 |  14 neurons
layer: 1 |  14 neurons
layer: 2 |  14 neurons
layer: 3 |  1 neurons





timer:  338.6212258338928
count:  168
accuracy: 60.76%
[1589, 1589, 1587, 1585, 1583, 1576, 1559, 1558, 1552, 1545]


timer:  646.5185971260071
count:  320
accuracy: 60.88%
[1592, 1592, 1589, 1589, 1588, 1580, 1574, 1567, 1560, 1547]







receiving_thread = threading.Thread(target = messenger_receive, args = ("receiving", sock), daemon = True)
receiving_thread.start()


threading








def test_agents_threading(self, inputs, solutions):
	
	for i in range(len(self.agents)):

		agent_thread = threading.Thread(target = test_agents_thread, args = (self, i, inputs, solutions))




def test_agents_thread(self, agent_index, inputs, solutions):

	# loop through given data
	for j in range(len(inputs)):
								
		# set inputs and calculate output
		self.agents[agent_index].set_inputs(inputs[j])
		output = self.agents[agent_index].calculate_value()

    	# score if it is right or now
		self.logic_scoring(agent_index, output, solutions[j])























end